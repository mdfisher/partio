/* partio4Maya  3/21/2012, John Cassella  http://luma-pictures.com and  http://redpawfx.com
PARTIO Export GUI
Copyright 2012 (c)  All rights reserved

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the
distribution.

Disclaimer: THIS SOFTWARE IS PROVIDED BY  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.
IN NO EVENT SHALL  THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
*/
//  Procedure Name: partioExportGui
//
//  Description:  A gui for the partioExport command   that gives much more user friendly control over exporting particles
//

global proc partioExportGui  ()
{

    global int $partioExportGuiTabSelected;

    if ($partioExportGuiTabSelected == 0) {
        $partioExportGuiTabSelected = 1;
    }

    if (`window  -exists  partioExportGui`)
        deleteUI partioExportGui ;

    window  -s true -title "partioExportGui v0.9.6" -w 520 -h 600
			-iconName "partioExportGui" partioExportGui;

////////////////////////////////////////////
///// Main layout is a TabLayout

////////////////////////////////////////////////////////
/////// CREATE CACHE  TAB

    int $start =  `playbackOptions -query -minTime`;
    int $end =  `playbackOptions -query -maxTime`;
    string $form = `formLayout -w 520 -h 600`;
//	string $tabLayout =`tabLayout  mainTabLayout`;  // when we add the manage cache stuff back in we can re-enable this
    string $mainLayout = `formLayout -w 530 Create_Cache `;

    string $aboutLogoButton = `iconTextButton -style "iconOnly"    -image1 "partioExportGuiLogo.png"`;
    string $refreshButton = `iconTextButton -style "iconOnly"  -image1 "partioExportRefresh.png"`;

    string $closeButton 	= `button  -w 75 -h 35 -ebg true -bgc .25 0 0 -l "Close" -c "deleteUI partioExportGui"`;
    string $dynExportButton    = `button -w 200 -h 35 -ebg true -bgc 0 .25  0 -l "partioExport" `;

	string $partioExportFormatOptionMenu = `optionMenuGrp -l "PartioFormat" partioExportFormat`;
	// TODO: make this call a function from  the plugin to return a proper list of formats it currently supports for writing
	menuItem -label "BGEO";
    menuItem -label "GEO";
    menuItem -label "PDA";
    menuItem -label "PDB";
    menuItem -label "PDC";
    menuItem -label "BIN";
    menuItem -label "PRT";
    menuItem -label "PTC";
	menuItem -label "PTS";
	menuItem -label "XYZ";
	menuItem -label "PCD";
	menuItem -label "RPC";
	//menuItem -label "ICEcache";
	menuItem -label "RIB";
//	menuItem -label "ASS";

    optionMenuGrp -e -sl 5 $partioExportFormatOptionMenu;

    string $exportPerFrameCheckbox = `checkBoxGrp -numberOfCheckBoxes 1  -label1 "Per/Frame"  -v1  1`;

    string $startFrame = `intFieldGrp -l "StartFrame" -cw 1 90 -cw 2 80 -nf 1  -v $start  0 0 0 `;
    string $endFrame   = `intFieldGrp -l "EndFrame" -cw 1 90 -cw 2 80 -nf 1 -v $end 0 0 0 `;


/////////////////////////////
// cache directory

	string $cachePathFromOptionVar = "";
	if (`optionVar -exists "partioExportGUICachePath"`)
	{
		$cachePathFromOptionVar = `optionVar -q "partioExportGUICachePath"`;
	}

    string $cacheDir = `textFieldButtonGrp -l "Cache Directory" -text $cachePathFromOptionVar -buttonLabel "....." -cw 1 85  -cw 2 400`;

    string $scroll  = `scrollLayout -w 520 -h 350 -hst 0 -vst 10 -cr 1 particleScrollList`;

    buildParticleScrollList();

	// edit functions to buttons
    button -e -c ("dynExportSelectedparticles "+$startFrame+" "+$endFrame+" "+$partioExportFormatOptionMenu+" "+$cacheDir+" "+$exportPerFrameCheckbox) $dynExportButton;
    textFieldButtonGrp -e -bc ("updatePath "+$cacheDir+" "+1) $cacheDir;
	textFieldButtonGrp -e -cc ("updatePath "+$cacheDir+" "+0) $cacheDir;
    iconTextButton -e -c "buildParticleScrollList" $refreshButton;

    formLayout  -edit

    -attachForm $aboutLogoButton "top" 5
    -attachForm $aboutLogoButton "left" 5
    -attachControl  $scroll "top" 5 $cacheDir
    -attachForm $scroll "left" 5
    -attachForm $closeButton "bottom" 5
    -attachForm $closeButton "right" 5
    -attachForm $dynExportButton "left" 5
    -attachForm $dynExportButton "bottom" 5
    -attachControl$partioExportFormatOptionMenu "left" -40 $dynExportButton
    -attachForm$partioExportFormatOptionMenu "bottom" 10
    -attachControl $startFrame  "left" 10 $aboutLogoButton
    -attachControl $endFrame "left"10 $aboutLogoButton
    -attachControl $exportPerFrameCheckbox "top" 5 $endFrame
    -attachControl $exportPerFrameCheckbox  "left" 75 $aboutLogoButton
    -attachControl $refreshButton "left" 10 $endFrame
    -attachForm $refreshButton "top" 28
    -attachForm $startFrame "top" 30
    -attachControl $endFrame "top" 5 $startFrame
    -attachControl $cacheDir "top" 5 $aboutLogoButton
    -attachForm $cacheDir "left"10

    $mainLayout;

    showWindow partioExportGui;

	// this shakes the window to force it to come up at the desired size every time.
    window -edit  -w 501 -h 401 partioExportGui;
    window -edit  -w 520 -h 500 partioExportGui;


}

global proc buildParticleScrollList()
{

    if (`columnLayout -q -exists "particleColumnLayout"`)
        deleteUI particleColumnLayout;

    setParent particleScrollList;
    string $columnMain = `columnLayout particleColumnLayout`;

    string $particles[] = `ls -type particle`;

    int $color  = 0;

    for ($particle in $particles)
    {
		// filters out ncloth crap because for whatever reason  ls -type particle returns all ncloth stuff too
		if (`nodeType $particle` == "particle" || `nodeType $particle` == "nParticle")
		{
			string $parent = `columnLayout -p $columnMain` ;
			buildParticleEntry $particle $parent $color;

			if ($color == 0)
			{
				$color = 1;
			}
			else
			{
				$color = 0;
			}
		}
    }
}


global proc buildParticleEntry (string $particle, string $parent, int $color )
{

    float $uiColor;
    if ($color == 0) {
        $uiColor = .2 ;
    }
    else  {
        $uiColor  = .35;
    }

    int  $open = 0;
    if (`frameLayout -exists ($particle+"frameLayout")`)
    {
        $open = `frameLayout -q -cl ($particle+"frameLayout")`;
        deleteUI ($particle+"frameLayout");
    }

    $framelayoutName = ($particle+"frameLayout");
    $columnLayoutName = ($particle+"columnLayout");
    $particleExportCheckbox = ($particle+"exportCheckBox");
    $particleRampCheckbox = ($particle+"rampCheckbox");
    $particleSupressedCheckbox = ($particle+"supressedCheckbox");
	$particleOverrideName = ($particle+"overrideNameText");


    if (!`rowLayout -exists ($particle+"checkboxRowLayout")`)
    {
        rowLayout -ebg true -bgc $uiColor $uiColor $uiColor -nc 4 -cw3 230 75 75  ($particle+"checkboxRowLayout");
        checkBox  -l  ("Check to Export ")  $particleExportCheckbox;
		textFieldGrp -text $particle $particleOverrideName;
        checkBox  -l  "ramp Attrs" -cc ("buildParticleEntry "+ $particle + " " + $parent + " " + $color) $particleRampCheckbox;
        checkBox  -l "supressed" -cc ("buildParticleEntry "+ $particle + " " + $parent+ " " + $color) $particleSupressedCheckbox;
        setParent $parent;
    }

    frameLayout -p $parent  -ebg true -bgc $uiColor $uiColor $uiColor -label $particle -collapsable true  -collapse $open -w 492 -borderStyle "etchedIn"
    -labelAlign "center" $framelayoutName;

    rowColumnLayout -ebg true -bgc $uiColor $uiColor $uiColor -nc 4 -cw 1 120 -cw 2 120 -cw 3 120 -cw 4 120   $columnLayoutName;

//checkboxes for each attr ////

    int $ramp = `checkBox -q -v $particleRampCheckbox`;
    int $supress = `checkBox -q -v $particleSupressedCheckbox`;

    string $attrs[] = `partioExportGuiListParticleAttrs  $particle "allPP" $ramp $supress `;   // uses a modified  version of listParticleAttrs with a separate list for dynExport

	if(!`attributeExists  "partioCheckboxStatus" $particle`)
	{
		addAttr -ln "partioCheckboxStatus"  -dt "string"  $particle;
		setAttr -type "string" ($particle+".partioCheckboxStatus") ("position,velocity");
	}
	string $chekBoxStat = `getAttr  ($particle+".partioCheckboxStatus")`;
	string $checkboxArray[] = stringToStringArray($chekBoxStat, ",");


    for ($attr in $attrs)
    {
		int $status = 0;
        if ($attr == "particleId") {}
        else
		{

            $checkBoxName = ($particle+$attr+"checkBox");
			if (`stringArrayContains $attr  $checkboxArray`)
			{
				$status = 1;
			}
            checkBox -l $attr -v $status -onc ("checkboxStatusChanger "+$particle + " " + $attr + " " + 1) -ofc ("checkboxStatusChanger "+$particle + " " + $attr + " " + 0) $checkBoxName;
        }
    }

    setParent ..;
    setParent ..;
}

global proc  checkboxStatusChanger(string $particle, string $attr, int $onOff)
{
	print "checkbox changer";
	if(`attributeExists  "partioCheckboxStatus" $particle`)
	{
		string $chekBoxStat = `getAttr  ($particle+".partioCheckboxStatus")`;
		print $chekBoxStat;
		string $checkboxArray[] = stringToStringArray($chekBoxStat, ",");
		if (`stringArrayContains $attr  $checkboxArray`)
		{
			if (!$onOff)  // remove from list
			{
				string $temp[] ={$attr};
				$checkboxArray = `stringArrayRemove $temp $checkboxArray`;
			}
			else{} // do nothing, highly unlikely, but just to cover all bases
		}
		else
		{
			// we want to add it to the string
			stringArrayInsertAtIndex(`size($checkboxArray)`, $checkboxArray, $attr);
		}
		setAttr -type "string" ($particle+".partioCheckboxStatus") `stringArrayToString $checkboxArray ","`;
	}
	else
	{
		addAttr -ln "partioCheckboxStatus"  -dt "string"  $particle;
		if  ($onOff)
		{
			setAttr -type "string" ($particle+".partioCheckboxStatus") ($attr+",");
		}
	}
}


global proc dynExportSelectedparticles  (string $startFrame, string $endFrame,
										 string $partioExportOptionMenu,
										 string $cacheDirCtrl,
										 string $exportPerFrameCheckbox)
{
	global string $gMainProgressBar;  // This is defined on maya startup

	// we have to do this here to clear out the  escape status before using the  gMainProgressBar just in case
	// it was  holding on to the escape status for some reason so cycling thru it this way seemed to fix it
	progressBar -edit
	-beginProgress
	-isInterruptable true
	$gMainProgressBar;
	progressBar -edit -endProgress  $gMainProgressBar;


    int $start = `intFieldGrp -q -v1 $startFrame`;
    int $end  = `intFieldGrp  -q -v1 $endFrame`;
    string $partioExportFormat = `optionMenuGrp -q -v  $partioExportOptionMenu`;
    string $cacheDir = `textFieldButtonGrp -q -text  $cacheDirCtrl`;

    int $perframe = `checkBoxGrp -q -v1 $exportPerFrameCheckbox`;

    string $partioFormatString = `tolower $partioExportFormat `;

    string $particles[] = `ls -type particle`;

    int $numFrames  = $end-$start;
    int $loopStartFrame = $start;
    int $loopEndFrame = $start;

    if ($perframe)
    {
        $loopEndFrame = $end;
        // we only want to bring up the progresswindow when we're using "perframe mode so we can escape cancel the export
		progressBar -edit
		-beginProgress
		-isInterruptable true
		-status "PartioExport per frame..."
		-minValue $loopStartFrame
		-maxValue $loopEndFrame
		-step 1
		$gMainProgressBar;

    }

    for ($x = $loopStartFrame; $x <= $loopEndFrame; $x++)
    {
        currentTime $x;

        int $currentFrame = `currentTime -q`;

        if ($perframe)
        {
            $start = $currentFrame;
            $end = $currentFrame;
            if(`progressBar -query -isCancelled $gMainProgressBar`)
			{
				break;
			}
			progressBar -edit -step 1 $gMainProgressBar;
        }

        for ($particle in $particles)
        {
			// filters out ncloth crap because for whatever reason  ls -type particle returns all ncloth stuff too
			if (`nodeType $particle` == "particle" || `nodeType $particle` == "nParticle")
			{
				$particleExportCheckbox = ($particle+"exportCheckBox");

				int $selected  = `checkBox -q -v  $particleExportCheckbox`;

				if ($selected  >= 1)
				{
					string $cmd;
					string $filePath;

				string $particleOverrideName = `textFieldGrp -q -text ($particle+"overrideNameText")`;
			// fix windows paths with escape characters


					$cmd = ("partioExport -mnf "+$start+" -mxf "+$end+ " -f "+$partioExportFormat+" -atr position -atr id ");
					$filePath = `encodeString($cacheDir)`;

					string $attrs[] = `partioExportGuiListParticleAttrs $particle allPP 0 1`;

					for ($attr in $attrs)
					{
						if ($attr == "particleId" || $attr == "position")
						{}
						else
						{
							$attrCheckbox =  ($particle+$attr+"checkBox");
							if (`checkBox -exists $attrCheckbox`)
							{
								$val = `checkBox -q -v  $attrCheckbox`;
								if ( $val >= 1)
								{
									$cmd += (" -atr "+$attr);
								}
							}
						}
					}
					if (`size($particleOverrideName)` > 0 &&  $particleOverrideName != $particle )
					{
						$cmd += (" -fp \""+$particleOverrideName+"\"");
					}
					$cmd += (" -p \""+$filePath +"\" "+$particle);
					evalEcho $cmd;
				}
				else
				{
					continue;
				}
			}
        }
    }// end frame loop

	progressBar -edit -endProgress  $gMainProgressBar;
}

/////////////////////////////////////////////
//// update  path

global proc  updatePath (string $cacheDirControl, int $button)
{
	string $startingDir =`textFieldButtonGrp -q -text $cacheDirControl`;
	if ($button)
	{

		if (!`filetest -d $startingDir`)
		{
			string $workspace = `workspace -q -rd`;
			if (`filetest -d ($workspace+"_output")`)
			{
				$startingDir = ($workspace + "/_output/particles");
			}
			else
			{
				$startingDir = ($workspace + "/particles");
			}
		}

		string $result[] = `fileDialog2 -dir $startingDir -fileMode 3 `;
		if (`size $result[0]` > 0) // else the dialog was most likely cancelled and we don't want to update
		{
			textFieldButtonGrp -e -text $result[0]  $cacheDirControl;
			optionVar -sv "partioExportGUICachePath" $result[0];
		}
	}
	else
	{
		textFieldButtonGrp -e -text $startingDir  $cacheDirControl;
		optionVar -sv "partioExportGUICachePath" $startingDir;
	}
}


/////////////////////////////////////////////////
//// padZeros

global proc string padzeros(int $num, int $l)
{
    string $padString = string($num);
    while (size($padString)<$l)
        $padString="0"+$padString;
    return $padString;
};


////////////////////////////////////////////
// partioExport versions of  these stolen from  autodesk listParticleAttrs.mel

proc int isInitialStateAttr( string $attr )
{
    int $s = size( $attr );
    if ( $s > 0 )
    {
        string $last = substring( $attr, $s, $s );
        if ( $last == "0" )
            return 1;
    }
    return 0;
}

proc int isCachedAttr( string $attr )
{
    int $s = size( $attr );

    if ( $s > 5 )
    {
        string $last5 = substring( $attr, $s - 4, $s );
        if ( $last5 == "Cache" )
            return 1;
    }

    if ( $s > 6 )
    {
        string $first6 = substring( $attr, 1, 6 );
        if ( $first6 == "cached" )
            return 1;
    }

    return 0;
}

proc int isArrayAttr( string $node, string $attr )
{
    string $typeStr = `getAttr -type ($node+"."+$attr)`;
    int $s = size( $typeStr );

    if ( $s > 5 )
    {
        string $last5 = substring( $typeStr, $s - 4, $s );
        if ( $last5 == "Array" )
            return 1;
    }

    return 0;
}

proc int isSuppressedAttr( string $attr )
{
    string $suppressedAttrs[];
    $suppressedAttrs =
    {
        "emitterDataPosition",
        "emitterDataVelocity",
        "fieldDataMass",
        "fieldDataPosition",
        "fieldDataVelocity",
        "inputGeometryPoints",
        "lastCachedPosition",
        "lastPosition",
        "lastVelocity",
        "lastWorldPosition",
        "lastWorldVelocity",
        "worldVelocityInObjectSpace"
    };

    $suppressedAttrs = sort( $suppressedAttrs );

    if ( size($attr) == 0 )
        return 0;

    int $i;
    for ( $i = 0; $i < size($suppressedAttrs); $i ++ )
    {
        int $cmp = strcmp( $suppressedAttrs[$i], $attr );
        if ( $cmp == 0 )
            return 1;
        if ( $cmp > 0 )
            return 0;
    }

    return 0;
}

proc int isValidAttr( string $node, string $attr, int $newOnly )
{
    if ( size( $attr ) ==0 )
        return 0;

    if ( $newOnly == 0 )
    {
        if ( `attributeQuery -exists -node $node $attr` == 0 )
            return 0;
    }

    if ( isInitialStateAttr( $attr ) )
        return 0;

    if ( isCachedAttr( $attr ) )
        return 0;

    if ( $newOnly == 0 )
    {
        if ( `attributeQuery -multi -node $node $attr` == 1 )
            return 0;

        if ( isSuppressedAttr( $attr ) )
            return 0;
    }

    return 1;
}

global proc string[] partioExportGuiListParticleAttrs( string $particle, string $typeStr, int $showRamp, int $supressed)
//
// type:
//  typeStr: vectorArray, doubleArray, all, allPP, nonPP
//
{

   // print $typeStr;
    string $attrs[];
    clear( $attrs );

    string $customArrayAttrs[];
    string $customVectorAttrs[];
    string $customDoubleAttrs[];
    string $customNonPPAttrs[];

    int $exists = `objExists $particle`;
    if ( $exists)
    {
        $customArrayAttrs = `listAttr -a -ud $particle`;

        for ($customAttr in $customArrayAttrs)
        {
            if ( `isValidAttr  $particle $customAttr  1`)
            {
                string $typeStr = `getAttr -type ($particle+"."+$customAttr)`;

                if ($typeStr == "vectorArray")
                {
                    $customVectorAttrs[size($customVectorAttrs)] = $customAttr;
                }
                else if ($typeStr == "doubleArray")
                {
                    $customDoubleAttrs[size($customDoubleAttrs)] = $customAttr;
                }
            }
        }
        $customNonPPAttrs = `listAttr -ud -s $particle`;
    }

    string $usefullSuppressedAttrs[] =
    {
        "lastCachedPosition",
        "lastPosition",
        "lastVelocity",
        "lastWorldPosition",
        "lastWorldVelocity"
    };

    string $defaultRampAttrs[] =
    {
        "rampAcceleration",
        "rampPosition",
        "rampVelocity"
    };

    string $defaultVectorAttrs[] =
    {
        "position",
        "velocity",
        "worldPosition",
        "worldVelocity",
        "acceleration",
        "force"
    };

    string $defaultDoubleAttrs[] =
    {
        "age",
        "birthTime",
        "mass",
        "particleId"
    };

    switch ($typeStr) {
    case "vectorArray":
    {
        $attrs = $defaultVectorAttrs;
        if ($showRamp)
        {
            $attrs = stringArrayCatenate($attrs, $defaultRampAttrs);
        }
        if ($supressed)
        {
            $attrs = stringArrayCatenate($attrs, $usefullSuppressedAttrs);
        }
        $attrs =  stringArrayCatenate($attrs, $customVectorAttrs);
        break;
    }
    case "doubleArray":
    {
        $attrs = $defaultDoubleAttrs;
        $attrs = stringArrayCatenate($attrs, $customDoubleAttrs);
        break;
    }
    case "allPP":
    {

        $attrs = stringArrayCatenate($defaultVectorAttrs, $customVectorAttrs);
        $attrs = stringArrayCatenate($attrs, $defaultDoubleAttrs);
        $attrs = stringArrayCatenate($attrs, $customDoubleAttrs);
        if ($showRamp)
        {
            $attrs = stringArrayCatenate($attrs, $defaultRampAttrs);
        }
        if ($supressed)
        {
            $attrs = stringArrayCatenate($attrs, $usefullSuppressedAttrs);
        }

        break;
    }
    case "all":
    {
        $attrs = stringArrayCatenate($defaultVectorAttrs, $customVectorAttrs);
        $attrs = stringArrayCatenate($attrs, $defaultDoubleAttrs);
        $attrs = stringArrayCatenate($attrs, $customDoubleAttrs);
        if ($showRamp)
        {
            $attrs = stringArrayCatenate($attrs, $defaultRampAttrs);
        }
        if ($supressed)
        {
            $attrs = stringArrayCatenate($attrs, $usefullSuppressedAttrs);
        }
        $attrs = stringArrayCatenate($attrs,$customNonPPAttrs);
        break;

    }
    case "nonPP":
    {
        $attrs = $customNonPPAttrs;
        break;
    }
    }

    return $attrs;
}

